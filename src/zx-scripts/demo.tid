title: $:/plugins/linonetwo/zx-script/demo
type: text/vnd.tiddlywiki

!! ZX JS script Demo

```js
console.log(`!! Hi!`);
```

Result will form a tiddler.

```js
console.log(`
Code block:

\`\`\`js
console.log(\`!! Hi!\`);
\`\`\`
`);
```

!! Dynamic WikiText Demo

```js
const ramdomID = Math.random().toString(36).slice(2);
const text = `<fieldset>
	<legend>Quick Add</legend>

	<$button>
		<$action-sendmessage $message="tm-new-tiddler" title=<<now "YYYY-MM-DD">> tags="${ramdomID}" />
    Add New Tiddler with ID ${ramdomID}
	</$button>

</fieldset>`

console.log(text)
```

!! Wiki Scripting Demo

```js
const exampleTitle = '$:/plugins/linonetwo/zx-script/style.css';

// to write script execute in tiddlywiki context, start with this separator ↓
/** tw */
// You can use $tw.wiki.getTiddler to get tiddler data, and can use some variables from previous context
const tiddlerData = $tw.wiki.getTiddler(exampleTitle);
// This script runs in the nodejs side, and you can't access some API from nodejs ↓ it will cause error
// $tw.notifier.display('$:/state/notification/asdf');

// You can even add tiddler using the API! But this will be add to the nodejs side, it will take a while to wait it sync to the browser side.
// $tw.syncadaptor.wiki.addTiddler({ title: 'asdf', text: 'aaa bbb' });
// You can't add state tiddler this way, they won't get sync to the browser. (nodejs wiki limitation)
// $tw.syncadaptor.wiki.addTiddler({ title: '$:/state/notification/asdf', text: 'aaa bbb' });

// You can use console to print some data
console.log(tiddlerData.fields.type);
// You can assign some data to a variable, it can be used in next context
const tiddlerDataString = JSON.stringify(tiddlerData);

// ↓ If you end the block with separator, you can write script execute in zx environment again
/** tw */
console.log(`\n!! Hi!\n`);
console.log(tiddlerDataString);
```

!!! DB and execution

Start from v0.8.0-prerelease11 of [TidGi](https://github.com/tiddly-gittly/TidGi-Desktop/releases), it has a [better-sqlite3](https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md) instance at `$tw.utils.Sqlite`. Which is accessible for server side plugin (TidGi is a launcher for nodejs wiki, so can run server side plugins) or zx script.

```js
// pure nodejs context
console.log(`## Hi!`);
let aaa = 3;

/** tw */

// now in worker_thread with $tw wiki access

let filterExample = $tw.wiki.filterOperators.sum((callback) => {callback({}, String(aaa));callback({}, String(aaa))})
console.log(filterExample)

// use Sqlite
const db = $tw.utils.Sqlite
const stmt = db.prepare('SELECT title, text FROM tiddlers');
const result = stmt.pluck().all()
console.log(result)
```